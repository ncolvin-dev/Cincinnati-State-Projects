//Assignment 10 Pseudo Code
//Nicholas Colvin

****CStack Class****

bool CStack::IsEmpty()
{
	bool blnIsEmpty = false;
	
	// Empty?
	if (m_plcsHeadNode == 0)
	{
		// Yes
		blnIsEmpty = true;
	}
	
	return blnIsEmpty;
}



void CStack::Push(int intValue)
{
	CNode* pclsNextNode = 0;
	
	
	// Alocate, Assign & Link using constuctors
	pclsNewNode = new CNode(intValue, m_pclsHeadNode);	
	
	// Ready for the next node
	m_clsHeadNode = pclsNewNode
}



int CStack::Pop()
{
	int intValue = 0;
	CNode* pclsNextNode = 0;
	
	// Empty list
	if(isEmpty() == false)
	{
		// No, get value
		intValue = m_plcsHeadNode->GetValue();
		
		// Get next
		pclsNextNode = m_pclsHeadNode-> GetNextNode();
		
		// Delete
		delete m_pclsHeadNode;
		m_pclsHeadNode = 0;
		
		// Move to next
		m_pclsHeadNode = pclsNextNode;
		
	}
	return intValue;
}



// --------------------------------------------------------------------------------
// Name: operator=
// Abstract: Called when assigning data from one existing object to another
// --------------------------------------------------------------------------------
void CStack::operator=(const CStack& clsOriginalToCopy)
{
	// Self assignment? Compare instance's addresses
	if (this != &clsOriginalToCopy)
	{
		// No, copy
		CleanUp();
		DeepCopy(clsOriginalToCopy);
	}
}



void CStack::CleanUp()
{
	while (blnIsEmpty != true)
	{
		Pop();
	}
}



void CStack::DeepCopy(const CStack &clsOriginalToCopy)
{
	CNode* pclsNextNode;
	CNode* pclsCurrentNode;
	CNode* pclsNewNode;
	
	// Copy Head Node
	m_pclsHeadNode = new CNode(clsOriginalToCopy.m_pclsHeadNode->GetValue())

	// Get Location of Next Node
	pclsNextNode = clsOriginalToCopy.m_pclsHeadNode->GetNextNode();
	
	// Set the current node to head node
	pclsCurrentNode = m_pclsHeadNode;
	
	// Copy Values
	while (pclsNextNode != 0)
	{
		// Allocate, Assign
		pclsNewNode = new CNode(pclsNextNode->GetValue())
		
		// Link
		pclsCurrentNode->SetNextNode(pclsNewNode)
		
		// Ready for next
		pclsCurrentNode = pclsNewNode;
		pclsNextNode = pclsNextNode->GetNextNode();
	}
}



void Print() const
{
	Print("Printing Stack")
}


void Print(const char* pstrCaption) const
{
	CNode* pclsCurrentNode;
	CNode* pclsNextNode;
	int intIndex = 0;
	
	cout << pstrCaption << " -------------" << endl;
	
	// Start from the top of the stack
	pclsCurrentNode = m_pclsHeadNode;
	
	while (pclsCurrentNode != 0)
	{
		// Count
		intIndex += 1;
		
		// Display Current Value
		cout << "Value at node #" << intIndex << "is" << 
		pclsCurrentNode->intValue << endl;
		
		// Get next node
		pclsNextNode = pclsCurrentNode->pclsNextNode;
		
		// Move to the next node
		pclsCurrentNode = pclsNextNode;
	}
}


****CQueue Class****



bool CQueue::IsEmpty()
{
	bool blnIsEmpty = false;
	
	// Empty?
	if (m_plcsHeadNode == 0)
	{
		// Yes
		blnIsEmpty = true;
	}
	
	return blnIsEmpty;
}



void CQueue::Push(int intValue)
{
	CNode* pclsNewNode = 0;
	
	// Alocate and Assign using constuctor
	m_pclsNewNode = new CNode(intValue);
	
	// Empty List?
	if (isEmpty() == true)
	{
		// link
		m_pclsHeadNode = pclsNewNode;
		m_pclsTailNode = pclsNewNode;
	}
	else
	{
		
		//No, add to end... link
		m_pclsTailNode->SetNextNode(pclsNewNode);
		
		// Move to end... ready for next
		m_pclsTailNode = pclsNewNode;
	}

	// Ready for the next node
	m_clsHeadNode = pclsNewNode
}



int CQueue::Pop()
{
	int intValue = 0;
	CNode* pclsNextNode = 0;
	
	// Empty list
	if(isEmpty() == false)
	{
		// No, get value
		intValue = m_plcsHeadNode->GetValue();
		
		// Get next
		pclsNextNode = m_pclsHeadNode-> GetNextNode();
		
		// Delete
		delete m_pclsHeadNode;
		m_pclsHeadNode = 0;
		
		// Move to next
		m_pclsHeadNode = pclsNextNode;
		
		// Was that the last node in the list?
		if (isEmpty == true)
		{
			// Yes, clear the tail node
			m_pclsTailNode = 0;
		}	
		
	}
	return intValue;
}



// --------------------------------------------------------------------------------
// Name: operator=
// Abstract: Called when assigning data from one existing object to another
// --------------------------------------------------------------------------------
void CQueue::operator=(const CQueue& clsOriginalToCopy)
{
	// Self assignment? Compare instance's addresses
	if (this != &clsOriginalToCopy)
	{
		// No, copy
		CleanUp();
		DeepCopy(clsOriginalToCopy);
	}
}



void CQueue::CleanUp()
{
	while (blnIsEmpty != true)
	{
		Pop();
	}
}



void CQueue::DeepCopy(const CQueue &clsOriginalToCopy)
{
	CNode* pclsNextNode;
	CNode* pclsCurrentNode;
	CNode* pclsNewNode;
	
	// Copy Head Node
	m_pclsHeadNode = new CNode(clsOriginalToCopy.m_pclsHeadNode->GetValue())

	// Get Location of Next Node
	pclsNextNode = clsOriginalToCopy.m_pclsHeadNode->GetNextNode();
	
	// Set the current node to head node
	pclsCurrentNode = m_pclsHeadNode;
	
	// Copy Values
	while (pclsNextNode != 0)
	{
		// Allocate, Assign
		pclsNewNode = new CNode(pclsNextNode->GetValue())
		
		// Link
		pclsCurrentNode->SetNextNode(pclsNewNode)
		
		// Ready for next
		pclsCurrentNode = pclsNewNode;
		pclsNextNode = pclsNextNode->GetNextNode();
	}
}



void CQueue::Print() const
{
	Print("Printing Stack")
}


void CQueue::Print(const char* pstrCaption) const
{
	CNode* pclsCurrentNode;
	CNode* pclsNextNode;
	int intIndex = 0;
	
	cout << pstrCaption << " -------------" << endl;
	
	// Start from the top of the stack
	pclsCurrentNode = m_pclsHeadNode;
	
	while (pclsCurrentNode != 0)
	{
		// Count
		intIndex += 1;
		
		// Display Current Value
		cout << "Value at node #" << intIndex << "is" << 
		pclsCurrentNode->intValue << endl;
		
		// Get next node
		pclsNextNode = pclsCurrentNode->pclsNextNode;
		
		// Move to the next node
		pclsCurrentNode = pclsNextNode;
	}
}